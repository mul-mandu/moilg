<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd
	http://mybatis.org/schema/mybatis-spring
	http://mybatis.org/schema/mybatis-spring-1.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/aop
   	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
   	
<!-- Root Context: Service(비지니스로직처리), DB관련 등의 설정!!!!!!!!!!!!!!!!!! -->
	
	
	<!-- 
	파일 업로드 :  
	maxUploadSize : 업로드 가능한 사이즈 (default 파일 크기 제한 없음 : -1)
					ex. 10485760 = 10MB (1024 * 1024 * 10 )
	defaultEncoding : 인코딩 관련
	-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="-1"></property>
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
	
	
	
	<!-- 커넥션풀 : DB접근 가능하게 -->
	<!-- 커넥션에 log 결과 받을 수 있는 API 추가한 경로로 세팅  -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:ORCL" />
		<property name="username" value="bookproject" />
		<property name="password" value="bookproject" />
	</bean>	
	
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
   	<!--  MyBatis 연동 설정 -->
  	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   	   <property name="dataSource" ref="dataSource"/>
  	 </bean>
    <!-- Mapper 스캔하도록 설정 -->
  	 <mybatis-spring:scan base-package="com.bookBoard.persistence"/>
  	 <mybatis-spring:scan base-package="com.member.persistence"/>
  	 <mybatis-spring:scan base-package="com.sentence.persistence"/>
  	 <mybatis-spring:scan base-package="com.mypage.persistence"/>
  	 <mybatis-spring:scan base-package="com.main.persistence"/>
	 
	 
	 
	<!-- 서비스 패키지 스캔하여, @Component , @Service등 어노테이션 붙은 클래스 
	스프링빈으로 등록하도록 설정 (빈으로 등록해야 객체가 생성되고 메서드 실행가능) -->
	<context:component-scan base-package="com.bookBoard.service" />
	<context:component-scan base-package="com.member.service" />
	<context:component-scan base-package="com.sentence.service" />
	<context:component-scan base-package="com.mypage.service" />
	<context:component-scan base-package="com.main.service" />
	
	
	<!-- AOP 어노테이션 설정
		 #1. AnoAdvice에서 @Component어노테이션 걸어놓은것 스프링빈으로 등록!  
			== <bean id="advice" class="com.board.aop.Advice"></bean>
		 #2. aop:aspectj-autoproxy 설정	
	-->
	<context:component-scan base-package="com.board.aop" />
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>	
		
		
	<!-- aop XML로 설정하는 법	
	<bean id="advice" class="com.board.aop.Advice"></bean>
	
				<aop:before method="before" pointcut-ref="pc1" /> 
				<aop:after method="afterAOP" pointcut-ref="pc1" /> 
				<aop:after-returning method="afterReturning" pointcut-ref="pc1" /> 
				<aop:after-throwing method="afterThrowing" pointcut-ref="pc1" /> 
		
			
	<aop:config>
		<aop:pointcut id="pc1" expression="execution(* com.board.service.TestService*.*(..))"/>
		<aop:pointcut id="pc2" expression="execution(* com.board.service.BoradService*.*(..))"/>
		<aop:aspect ref="advice">
			<aop:around method="around" pointcut-ref="pc1" /> 
			<aop:around method="around" pointcut-ref="pc2" /> 
		</aop:aspect>
	</aop:config>
	-->

	

	   <!-- 이메일 인증 관련 빈 등록 -->
	   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	      <property name="host" value="smtp.naver.com" />
	      <property name="port" value="465" />
	      <property name="username" value="rhlatjd12" />
	      <property name="password" value="Rhlatjd@2021.." />
	      <property name="javaMailProperties">
	         <props>
	                <prop key="mail.transport.protocol">smtp</prop>
	                <prop key="mail.smtp.auth">true</prop>
	                <!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
	                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
	                <prop key="mail.smtp.starttls.enable">true</prop>
	                <prop key="mail.debug">true</prop>
	                <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
					<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
	            </props>
	      </property>
	      
	   </bean>


		
</beans>
